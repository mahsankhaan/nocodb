###########
# Stage 2: Copying Artifacts into Nocodb
###########
FROM node:18.19.1-alpine as builder
WORKDIR /usr/src/app

# Install necessary dependencies
RUN apk add --no-cache python3 make g++
RUN corepack enable && corepack prepare pnpm@latest --activate

# Copy build artifacts from the previous stage
COPY --from=build /app/packages/nocodb/package.json ./package.json  
COPY --from=build /app/packages/nocodb/docker/nc-gui/ ./docker/nc-gui/
COPY --from=build /app/packages/nocodb/docker/main.js ./docker/index.js
COPY --from=build /app/packages/nocodb/docker/start-local.sh /usr/src/appEntry/start.sh
COPY --from=build /app/packages/nocodb/src/public/ ./docker/public/

# Configure npm for flat node_modules without symlinks
RUN echo "node-linker=hoisted" > .npmrc

# Install production dependencies, reduce node_module size with modclean
RUN pnpm uninstall nocodb-sdk && \
    pnpm install --prod --shamefully-hoist --reporter=silent && \
    pnpm dlx modclean --patterns="default:*" --ignore="nc-lib-gui/**,dayjs/**,express-status-monitor/**,@azure/msal-node/dist/**" --run  && \
    rm -rf ./node_modules/sqlite3/deps

# Package built code into app.tar.gz and add execute permission to start.sh
RUN tar -czf ../appEntry/app.tar.gz ./* && \
    chmod +x /usr/src/appEntry/start.sh