# ###########
# # Stage 2: Copying Artifacts into Nocodb
# ###########
FROM registry.redhat.io/rhel8/nodejs-18 as builder
WORKDIR /usr/src/app

# Install necessary dependencies as root
USER root

# Install necessary dependencies
RUN yum install -y python3 make gcc-c++

# Assuming corepack is available from Red Hat's internal registry
RUN corepack enable && corepack prepare pnpm@latest --activate

# Copy build artifacts from the previous stage
COPY --from=selfhosted.jfrog.io/nocodb-deps/nocodb-install-deps:latest /app/packages/nocodb/package.json ./package.json  
COPY --from=selfhosted.jfrog.io/nocodb-deps/nocodb-install-deps:latest /app/packages/nocodb/docker/nc-gui/ ./docker/nc-gui/
COPY --from=selfhosted.jfrog.io/nocodb-deps/nocodb-install-deps:latest /app/packages/nocodb/docker/main.js ./docker/index.js
COPY --from=selfhosted.jfrog.io/nocodb-deps/nocodb-install-deps:latest /app/packages/nocodb/docker/start-local.sh /usr/src/appEntry/start.sh
COPY --from=selfhosted.jfrog.io/nocodb-deps/nocodb-install-deps:latest /app/packages/nocodb/src/public/ ./docker/public/

# Configure npm for flat node_modules without symlinks
RUN echo "node-linker=hoisted" > .npmrc

# Install production dependencies, reduce node_module size with modclean
RUN pnpm uninstall nocodb-sdk && \
    pnpm install --prod --shamefully-hoist --reporter=silent && \
    pnpm dlx modclean --patterns="default:*" --ignore="nc-lib-gui/**,dayjs/**,express-status-monitor/**,@azure/msal-node/dist/**" --run  && \
    rm -rf ./node_modules/sqlite3/deps

# Package built code into app.tar.gz and add execute permission to start.sh
RUN tar -czf ../appEntry/app.tar.gz ./* && \
    chmod +x /usr/src/appEntry/start.sh


##########
# Stage 3: Runner
##########
FROM alpine:3.19
WORKDIR /usr/src/app

ENV NC_DOCKER 0.6
ENV NODE_ENV production
ENV PORT 8080
ENV NC_TOOL_DIR=/usr/app/data/

RUN apk --update --no-cache add \
    nodejs \
    tar \
    dumb-init \
    curl \
    jq

# Copy packaged production code & main entry file
COPY --from=builder /usr/src/appEntry/ /usr/src/appEntry/

EXPOSE 8080
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start Nocodb
CMD ["/usr/src/appEntry/start.sh"]
